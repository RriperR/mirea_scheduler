from collections import defaultdict
from datetime import timedelta

class ScheduleAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–∫–Ω–∞ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"""

    MIN_TIME_TO_TRAVEL = timedelta(minutes=10)

    @staticmethod
    def find_issues(events):
        """–ò—â–µ—Ç –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º –≥—Ä—É–ø–ø –∏ –¥–Ω–µ–π"""
        issues = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ –∏ –¥–Ω—é
        events_by_group_day = defaultdict(lambda: defaultdict(list))
        for event in events:
            group = event["group"]
            day = event["start"].date()
            events_by_group_day[group][day].append(event)

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        for group, days in events_by_group_day.items():
            for day, day_events in days.items():
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
                day_events.sort(key=lambda e: e["start"])

                for i in range(len(day_events) - 1):
                    event_1 = day_events[i]
                    event_2 = day_events[i + 1]

                    end_prev = event_1["end"]
                    start_next = event_2["start"]

                    location_prev, location_next = event_1["location"], event_2["location"]
                    gap = start_next - end_prev

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–∫–Ω–∞ (–±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤)
                    if gap > timedelta(hours=2):
                        issues.append({
                            "category": "–î–ª–∏–Ω–Ω–æ–µ –æ–∫–Ω–æ",
                            "summary": event_1["summary"],
                            "start": event_1["start"],
                            "end": event_1["end"],
                            "location": event_1["location"],
                            "teacher": event_1["teacher"],
                            "group": event_1["group"],
                            "discipline": event_1["discipline"],

                            # üîπ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
                            "related_summary_2": event_2["summary"],
                            "related_start_2": event_2["start"],
                            "related_end_2": event_2["end"],
                            "related_location_2": event_2["location"],
                            "related_teacher_2": event_2["teacher"],
                            "related_group_2": event_2["group"],
                            "related_discipline_2": event_2["discipline"],

                            "description": f"–û–∫–Ω–æ –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏: {gap}"
                        })

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–æ—Ä–ø—É—Å–∞–º–∏
                    if location_prev != location_next and gap < ScheduleAnalyzer.MIN_TIME_TO_TRAVEL:
                        issues.append({
                            "category": "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥",
                            "summary": event_1["summary"],
                            "start": event_1["start"],
                            "end": event_1["end"],
                            "location": event_1["location"],
                            "teacher": event_1["teacher"],
                            "group": event_1["group"],
                            "discipline": event_1["discipline"],

                            # üîπ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —É—Å–ø–µ—Ç—å
                            "related_summary_2": event_2["summary"],
                            "related_start_2": event_2["start"],
                            "related_end_2": event_2["end"],
                            "related_location_2": event_2["location"],
                            "related_teacher_2": event_2["teacher"],
                            "related_group_2": event_2["group"],
                            "related_discipline_2": event_2["discipline"],

                            "description": f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å–ø–µ—Ç—å –∏–∑ {location_prev} –≤ {location_next} –∑–∞ {gap}."
                        })

        return issues
